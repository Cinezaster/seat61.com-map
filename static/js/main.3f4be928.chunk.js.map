{"version":3,"sources":["context/StartingPointContext.js","context/DestinationContext.js","components/Map.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["StartingPointContext","createContext","StartingPointProvider","props","useState","state","setState","Provider","value","children","DestinationContext","DestinationProvider","position","MapComponent","useContext","selectedCity","setSelectedCity","selectedDestination","setSelectedDestination","selectedCityObject","connections","find","connection","name","undefined","destinations","center","zoom","TileLayer","url","attribution","map","destination","location","opacity","key","Marker","onclick","lat","lon","icon","L","iconUrl","iconRetinaUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","tooltipAnchor","shadowSize","Polyline","color","positions","onmouseover","Info","App","id","style","flexGrow","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oo+hBAEMA,EAAuBC,wBAAc,CAAC,GAAI,eAEnCC,EAAwB,SAACC,GAAW,IAAD,EACpBC,mBAAS,IADW,mBACvCC,EADuC,KAChCC,EADgC,KAE9C,OACE,kBAACN,EAAqBO,SAAtB,CAA+BC,MAAO,CAACH,EAAOC,IAC3CH,EAAMM,WAKET,ICXTU,EAAqBT,wBAAc,CAAC,GAAI,eAEjCU,EAAsB,SAACR,GAAW,IAAD,EAClBC,mBAAS,IADS,mBACrCC,EADqC,KAC9BC,EAD8B,KAE5C,OACE,kBAACI,EAAmBH,SAApB,CAA6BC,MAAO,CAACH,EAAOC,IACzCH,EAAMM,WAKEC,ICJTE,EAAW,CAAC,QAAS,KAsEZC,MArEf,WAAyB,IAAD,EACkBC,qBAAWd,GAD7B,mBACfe,EADe,KACDC,EADC,OAEgCF,qBAAWJ,GAF3C,mBAEfO,EAFe,KAEMC,EAFN,KAGhBC,EAAsC,KAAjBJ,EAAsBK,EAAYC,KAAK,SAACC,GAAD,OAAgBA,EAAWC,OAASR,SAAgBS,EAChHC,EAAgC,KAAjBV,EAAsBI,EAAmBM,kBAAeD,EAC7E,OACE,kBAAC,IAAD,CAAME,OAAQd,EAAUe,KAAM,GAC5B,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAGZV,EAAYW,IAAI,SAAAT,GACd,IAEIU,EAFEC,EAAWX,EAAWW,SACxBC,EAAU,EAQd,OANIT,KACFO,EAAcP,EAAaJ,KAAK,SAACW,GAAD,OAAiBA,EAAYT,OAASD,EAAWC,UAE/EW,EAAU,KAGVD,EAEA,kBAAC,WAAD,CAAUE,IAAKb,EAAWC,MACxB,kBAACa,EAAA,EAAD,CACEC,QAAS,WACHf,EAAWC,OAASR,EACtBC,EAAgB,IAEhBA,EAAgBM,EAAWC,OAG/BX,SAAU,CAACqB,EAASK,IAAKL,EAASM,KAClCL,QAASA,EACTM,KAAMC,IAAED,KAAK,CACXE,QAAS,yBACTC,cAAe,4BACfC,UAAW,2BACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,cAAe,CAAC,IAAK,IACrBC,WAAY,CAAC,GAAI,QAMnBjB,EACE,kBAACkB,EAAA,EAAD,CACEC,MAAOnB,EAAYT,OAASN,EAAsB,SAAW,OAC7DmC,UAAW,CAAC,CAACjC,EAAmBc,SAASK,IAAKnB,EAAmBc,SAASM,KAAM,CAACN,EAASK,IAAKL,EAASM,MACxGc,YAAa,kBAAMnC,EAAuBc,EAAYT,SAGxD,MAKH,OCnDF+B,G,MAdF,WAAO,IAAD,EACuBxC,qBAAWd,GADlC,mBACVe,EADU,aAEqCD,qBAAWJ,IAFhD,mBAEVO,EAFU,KAGXE,GAHW,KAG2B,KAAjBJ,EAAsBK,EAAYC,KAAK,SAACC,GAAD,OAAgBA,EAAWC,OAASR,SAAgBS,GACtH,OAAIL,EAEA,6BACGA,EAAmBI,KADtB,MAC+BN,GAI5B,OCKMsC,MAff,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,yBAAKC,GAAG,kBACN,kBAAC,EAAD,MACA,yBAAKC,MAAO,CAAEC,SAAU,IACtB,kBAAC,EAAD,WCFQC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3f4be928.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\n\nconst StartingPointContext = createContext(['', () => { }])\n\nexport const StartingPointProvider = (props) => {\n  const [state, setState] = useState('')\n  return (\n    <StartingPointContext.Provider value={[state, setState]}>\n      {props.children}\n    </StartingPointContext.Provider>\n  )\n}\n\nexport default StartingPointContext\n","import React, { createContext, useState } from 'react'\n\nconst DestinationContext = createContext(['', () => { }])\n\nexport const DestinationProvider = (props) => {\n  const [state, setState] = useState('')\n  return (\n    <DestinationContext.Provider value={[state, setState]}>\n      {props.children}\n    </DestinationContext.Provider>\n  )\n}\n\nexport default DestinationContext","import React, { Fragment, useContext } from 'react'\nimport './Map.css'\nimport './../assets/leaflet.css'\nimport { Map as LMap, Marker, TileLayer, Polyline } from 'react-leaflet'\nimport L from 'leaflet'\nimport connections from './../data/connections.json'\nimport StartingPointContext from '../context/StartingPointContext'\nimport DestinationContext from '../context/DestinationContext'\n\nconst position = [51.505, -0.09]\nfunction MapComponent() {\n  const [selectedCity, setSelectedCity] = useContext(StartingPointContext)\n  const [selectedDestination, setSelectedDestination] = useContext(DestinationContext)\n  const selectedCityObject = selectedCity !== '' ? connections.find((connection) => connection.name === selectedCity) : undefined\n  const destinations = selectedCity !== '' ? selectedCityObject.destinations : undefined\n  return (\n    <LMap center={position} zoom={5}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n      />\n      {\n        connections.map(connection => {\n          const location = connection.location\n          let opacity = 1\n          let destination\n          if (destinations) {\n            destination = destinations.find((destination) => destination.name === connection.name)\n            if (!destination) {\n              opacity = .2\n            }\n          }\n          if (location) {\n            return (\n              <Fragment key={connection.name}>\n                <Marker\n                  onclick={() => {\n                    if (connection.name === selectedCity) {\n                      setSelectedCity('')\n                    } else {\n                      setSelectedCity(connection.name)\n                    }\n                  }}\n                  position={[location.lat, location.lon]}\n                  opacity={opacity}\n                  icon={L.icon({\n                    iconUrl: 'images/marker-icon.png',\n                    iconRetinaUrl: 'images/marker-icon-2x.png',\n                    shadowUrl: 'images/marker-shadow.png',\n                    iconSize: [25, 41],\n                    iconAnchor: [12, 41],\n                    popupAnchor: [1, -34],\n                    tooltipAnchor: [16, -28],\n                    shadowSize: [41, 41]\n                  })}\n                >\n                  {/* <Popup>{`https://www.seat61.com/${connection.url}`}</Popup> */}\n                </Marker>\n                {\n                  destination ?\n                    <Polyline\n                      color={destination.name === selectedDestination ? 'orange' : 'lime'}\n                      positions={[[selectedCityObject.location.lat, selectedCityObject.location.lon], [location.lat, location.lon]]}\n                      onmouseover={() => setSelectedDestination(destination.name)}\n                    />\n                    :\n                    null\n                }\n              </Fragment>\n            )\n          }\n          return ''\n        })\n      }\n\n    </LMap>\n  )\n}\n\nexport default MapComponent;","import React, { useContext } from 'react'\nimport './Info.css'\nimport connections from './../data/connections.json'\nimport StartingPointContext from '../context/StartingPointContext'\nimport DestinationContext from '../context/DestinationContext'\n\nconst Info = () => {\n  const [selectedCity, setSelectedCity] = useContext(StartingPointContext)\n  const [selectedDestination, setSelectedDestination] = useContext(DestinationContext)\n  const selectedCityObject = selectedCity !== '' ? connections.find((connection) => connection.name === selectedCity) : undefined\n  if (selectedCityObject) {\n    return (\n      <div>\n        {selectedCityObject.name} - {selectedDestination}\n      </div>\n    )\n  }\n  return null\n}\n\nexport default Info;","import React, { useState, Fragment } from 'react'\nimport './App.css'\nimport Map from './components/Map'\nimport Info from './components/Info'\nimport { StartingPointProvider } from './context/StartingPointContext'\nimport { DestinationProvider } from './context/DestinationContext'\n\nfunction App() {\n  return (\n    <StartingPointProvider>\n      <DestinationProvider>\n        <div id='flex-container'>\n          <Map />\n          <div style={{ flexGrow: 2 }}>\n            <Info />\n          </div>\n        </div>\n      </DestinationProvider>\n    </StartingPointProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}